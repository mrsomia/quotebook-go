// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package dbqueries

import (
	"context"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
  name
) VALUES (
  ?
)
RETURNING id, name
`

func (q *Queries) CreateAuthor(ctx context.Context, name string) (Author, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, name)
	var i Author
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createQuote = `-- name: CreateQuote :one
INSERT into quotes (
  content,
  author_id
) VALUES (
  ?, ?
)
RETURNING id, content, author_id, date_added
`

type CreateQuoteParams struct {
	Content  string
	AuthorID int64
}

func (q *Queries) CreateQuote(ctx context.Context, arg CreateQuoteParams) (Quote, error) {
	row := q.db.QueryRowContext(ctx, createQuote, arg.Content, arg.AuthorID)
	var i Quote
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.AuthorID,
		&i.DateAdded,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const deleteAuthorByName = `-- name: DeleteAuthorByName :exec
DELETE FROM authors
WHERE name = ?
`

func (q *Queries) DeleteAuthorByName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteAuthorByName, name)
	return err
}

const findAuthorByName = `-- name: FindAuthorByName :one
SELECT id, name FROM authors
WHERE name = ? LIMIT 1
`

func (q *Queries) FindAuthorByName(ctx context.Context, name string) (Author, error) {
	row := q.db.QueryRowContext(ctx, findAuthorByName, name)
	var i Author
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name FROM authors
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getQuote = `-- name: GetQuote :one
SELECT id, content, author_id, date_added FROM quotes
WHERE id = ? LIMIT 1
`

func (q *Queries) GetQuote(ctx context.Context, id int64) (Quote, error) {
	row := q.db.QueryRowContext(ctx, getQuote, id)
	var i Quote
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.AuthorID,
		&i.DateAdded,
	)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE authors
set name = ?
WHERE id = ?
`

type UpdateAuthorParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.ExecContext(ctx, updateAuthor, arg.Name, arg.ID)
	return err
}
